#!/usr/bin/perl

use strict;

use Getopt::Long;
use Pod::Usage;

######################################################################
# Prelude
######################################################################

# Yes I know about autoconf ... and autoconf sux.

# assume standard: binutils, gcc, as, ld, gnu toolchain
# assume standard: make, sh?, perl?
# assume standard: diffutils, fileutils, findutils, grep, patchutils, sh-utils

my $project = 
    "XXX";
my $projectcmdline = 
    "./XXX demos/foo.c";

######################################################################
# Options
######################################################################

my $prefix="/usr/local";

my $bt=0;

my $pcre=1;
my $ocamlnet = 1;

my $gui=1; # gtk, cairo

#my $opt=".opt";

my $man = 0;
my $help = 0;

local $_ = join ' ', @ARGV;

# see http://perldoc.perl.org/Getopt/Long.html
# coupling: if add options here, add an explanation at the bottom of this file
# too. Later may also add something in the documentation latex file 
# (or use LP)
GetOptions (
    "prefix=s" => \$prefix,

    "bt!" => \$bt,
    "pcre!" => \$pcre,

    "gui!" => \$gui,

    "with-all" => sub { 
        $bt = 1; $pcre = 1; $gui = 1;
    },
    'help|?' => \$help, 
    'man' => \$man
    ) or pod2usage(2);
    #or die "$0: GetOptions: $!";

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $src="$prefix/share/$project";

#dependencies:
#ex: if ($visual) { $gui = 1; }

######################################################################
# Side effects
######################################################################

######################################################################
# Helpers
######################################################################
BEGIN { die "need Perl 5 or greater" if $] < 5 ; }

#use Common;
sub pr2 { print STDERR "@_\n" }
sub cat { 
    my ($what) = @_;
    my @list;
    open(TMP, $what);
    while(<TMP>) { push @list, "$_"; }
    \@list;
}
sub notb   { !$_[0] }
sub mapf   { my ($f, $xs) = @_; [ map { &$f($_) } @{$xs} ] }
sub plural { my ($e) = @_; if ($e > 1) { "s" } else { "" } }

sub check_config { my ($command, $expect, $msggood, $msgbad) = @_;
    my $error = 0;
		   
    my $full = cat($command);
    my $res = join(" ", @{$full});
#	       pr2 $res;
    if(notb($res =~ $expect)) { $error++; pr2 "!!!! $msgbad !!!!"; }
    else { pr2 $msggood }
    return $error;
}
######################################################################
# Let's go
######################################################################

pr2 "Checking your configuration.\n";

my $error = 0;
my $error2 = 0;

#---------------------------------------------------------------------
# Compilers and runtimes
#---------------------------------------------------------------------
$error += 
    check_config("echo \"1;;\\n\" | ocaml |",
                 "Objective(.*) 3.*",
                 "OCaml (the wonderful language) is present.",
                 "The program ocaml is missing or is not a good version. We need at least 3.09",
                 );


#if ($opt eq ".opt") {
#   my $opt_check = `which ocamlc.opt 2> /dev/null`;
#   if($opt_check =~ "/ocamlc.opt\$") {
#	pr2 "ocamlc.opt is present.";
#   }
#   else {
#   	$opt="";
#	pr2 "ocamlc.opt not found";
#   }
#
#   my $opt_check = `which ocamlopt.opt 2> /dev/null`;
#   if($opt_check =~ "/ocamlopt.opt\$") {
#	pr2 "ocamlopt.opt is present.";
#   }
#   else {
#   	$opt="";
#	pr2 "ocamlopt.opt not found";
#   }
#
#   my $opt_check = `which ocamldep.opt 2> /dev/null`;
#   if($opt_check =~ "/ocamldep.opt\$") {
#	pr2 "ocamldep.opt is present.";
#   }
#   else {
#   	$opt="";
#	pr2 "ocamldep.opt not found";
#   }
#
#   my $opt_check = `which ocamllex.opt 2> /dev/null`;
#   if($opt_check =~ "/ocamllex.opt\$") {
#	pr2 "ocamllex.opt is present.";
#   }
#   else {
#   	$opt="";
#	pr2 "ocamllex.opt not found";
#   }
#
#   if($opt eq "") {
#       pr2 "At least one native OCaml tool have not been found.";
#       pr2 "Desactivation of all native OCaml tools for compilation.";
#   }
#}

#---------------------------------------------------------------
# Developers tools
#---------------------------------------------------------------

pr2 "";

$error += check_config(
  "make -v 2>&1 |grep Make|",
  "GNU Make 3\.[0-9]+", #version 3.81
  "make (gnu version) is present.",
  "The program gnu make is missing or is not a good version.
We need  3.XX",
);


#---------------------------------------------------------------------
# More developers tools
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Librairies
#---------------------------------------------------------------------
my $arch = `uname`;

# if darwin or cygwin then could just modify this variable ? enough ?
my $prefix_distrib = "/usr";

my $PCRE_INCLUDE="$prefix_distrib/include";
my $PCRE_LIBS="$prefix_distrib/lib";

if($pcre) {

    if($arch =~ /Darwin/) {
        $PCRE_INCLUDE="/opt/local/include";
        $PCRE_LIBS="/opt/local/lib";
    }

    my $err += check_config("grep PCRE_MAJOR  $PCRE_INCLUDE/pcre.h |",
		       "#define PCRE_MAJOR       ",
		       "PCRE is present.",
		       "The PCRE library is missing.",
		      );
    if ($err) { $pcre = 0; }
    $error2 += $err;
}

if($gui) {
    pr2 "";
    pr2 "Configuring ocamlgtk";
    my $err = system("cd external/ocamlgtk; ./configure");
    if ($err) { $gui = 0; $error2++; }

    pr2 "";
    pr2 "Configuring ocamlcairo";
    my $err = system("cd external/ocamlcairo; 
            LABLGTKDIR=../../ocamlgtk/src ./configure --with-gtk");
    if ($err) { $gui = 0; $error2++; }

}

# this is a smaller installation of ocamlnet. just call the 
# netsys/configure
if(1) {
    pr2 "";
    pr2 "Configuring ocamlnet";
    my $err = system("cd external/ocamlnet/netsys; ./configure");
    if ($err) { $ocamlnet = 0; $error2++; }
}

######################################################################
# Generate config files (platform/portability issues)
######################################################################

######################################################################
# Generate globals files (features issues)
######################################################################

######################################################################
# Diagnostic 
######################################################################

if($error) { 
    pr2 "
----------------------------------------------------------------------
!!!! There seems to have problem, we have found $error missing package" . 
plural($error) . ".
" . (($error > 1) ? "Some of those packages" : "This package") . 
    " may be installed by picking " . ($error > 1 ? "them" : "it") . 
    " in $project-dependencies.tgz available
on the $project website. !!!!
----------------------------------------------------------------------
";
} else { 

    pr2 "
----------------------------------------------------------------------

All seems fine for $project.

To compile $project type:
  \$ make depend
  \$ make

Then, to test $project simply type:
  \$ $projectcmdline

----------------------------------------------------------------------
";

}


######################################################################
# Generating the configuration
######################################################################

pr2 "$project target prefix: $prefix (you can use --prefix to override it)";
pr2 "Generating Makefile.config (BT=$bt, PCRE=$pcre, GUI=$gui)";
pr2 " (see also --help)";
open(CONFIG, ">Makefile.config");
print CONFIG "# autogenerated by configure

# Where to install the binary
BINDIR=$prefix/bin

# Where to install the man pages
MANDIR=$prefix/man

# Where to install the lib
LIBDIR=$prefix/lib

# Where to install the configuration files
SHAREDIR=$src

# Common features, cf commons/Makefile
FEATURE_SEXP_BUILTIN_COMMONS=1
FEATURE_JSON_BUILTIN_COMMONS=1
FEATURE_XML_BUILTIN_COMMONS=1

# Features
FEATURE_BACKTRACE=$bt
FEATURE_PCRE=$pcre
FEATURE_GUI=$gui
";

if($pcre) {
    print CONFIG "
# Libraries
PCRE_INCLUDE=$PCRE_INCLUDE
PCRE_LIBS=$PCRE_LIBS
"
}

# The OPTBIN variable is here to allow to use ocamlc.opt instead of
# ocaml, when it is available, which speeds up compilation. So
# if you want the fast version of the ocaml chain tools, set this var
# or setenv it to \".opt\" in your startup script.
#OPTBIN=$opt

pr2 "Generating commons/features.ml";
`cpp -DFEATURE_BACKTRACE=$bt -DFEATURE_PCRE=$pcre commons/features.ml.in > commons/features.ml`;

pr2 "Generating globals/config.ml";
my $command = "perl -p -e 's#Not_found.\*#Not_found->\\\"$src\\\"#' globals/config.ml.in > globals/config.ml";
`$command`;

`touch test.ml`;

######################################################################
# Documentation
######################################################################

__END__

=head1 NAME

configure - setting compilation options for pfff

=head1 SYNOPSIS

configure [options] [--prefix=/path/to/install]

Options are:
--prefix
--[no]bt
--[no]pcre
--[no]gui
--with-all

=head1 OPTIONS

=over 8






=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read command line options and generate
a B<Makefile.config> and other files to set the compilation
environment for xxx.

=cut
