type token =
  | INT of (AbstractSyntax.stringi)
  | FLOAT of (AbstractSyntax.stringi)
  | CHAR of (AbstractSyntax.stringi)
  | STRING of (AbstractSyntax.stringi)
  | UIDENT of (AbstractSyntax.stringi)
  | LIDENT of (AbstractSyntax.stringi)
  | COLON of (AbstractSyntax.stringi)
  | BAR of (AbstractSyntax.stringi)
  | EQUAL of (AbstractSyntax.stringi)
  | MINUSGREATER of (AbstractSyntax.stringi)
  | SEMISEMI of (AbstractSyntax.stringi)
  | VAL of (AbstractSyntax.stringi)
  | TYPE of (AbstractSyntax.stringi)
  | OF of (AbstractSyntax.stringi)
  | AND of (AbstractSyntax.stringi)
  | EXTERNAL of (AbstractSyntax.stringi)
  | EXCEPTION of (AbstractSyntax.stringi)
  | MUTABLE of (AbstractSyntax.stringi)
  | QUOTE of (AbstractSyntax.stringi)
  | UNDERSCORE of (AbstractSyntax.stringi)
  | DOT of (AbstractSyntax.stringi)
  | LPAREN of (AbstractSyntax.stringi)
  | RPAREN of (AbstractSyntax.stringi)
  | RBRACE of (AbstractSyntax.stringi)
  | LBRACE of (AbstractSyntax.stringi)
  | COMMA of (AbstractSyntax.stringi)
  | STAR of (AbstractSyntax.stringi)
  | SEMI of (AbstractSyntax.stringi)
  | COLONCOLON of (AbstractSyntax.stringi)
  | FALSE of (AbstractSyntax.stringi)
  | TRUE of (AbstractSyntax.stringi)
  | PLUS of (AbstractSyntax.stringi)
  | MINUS of (AbstractSyntax.stringi)
  | MINUSDOT of (AbstractSyntax.stringi)
  | PREFIXOP of (AbstractSyntax.stringi)
  | INFIXOP0 of (AbstractSyntax.stringi)
  | INFIXOP1 of (AbstractSyntax.stringi)
  | INFIXOP2 of (AbstractSyntax.stringi)
  | INFIXOP3 of (AbstractSyntax.stringi)
  | INFIXOP4 of (AbstractSyntax.stringi)
  | OR of (AbstractSyntax.stringi)
  | LESS of (AbstractSyntax.stringi)
  | GREATER of (AbstractSyntax.stringi)
  | BARBAR of (AbstractSyntax.stringi)
  | AMPERSAND of (AbstractSyntax.stringi)
  | AMPERAMPER of (AbstractSyntax.stringi)
  | OPEN of (AbstractSyntax.stringi)
  | EOF of (AbstractSyntax.uniti)

val main :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> AbstractSyntax.signature * AbstractSyntax.uniti
val interface :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> AbstractSyntax.signature * AbstractSyntax.uniti
val implementation :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> AbstractSyntax.structure * AbstractSyntax.uniti
